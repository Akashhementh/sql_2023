1.Write an SQL query to fetch “FIRST_NAME” from the Worker table using the alias name <WORKER_NAME>. 
=>	select first_name as WORKER_NAME from worker;

2.Write an SQL query to fetch “FIRST_NAME” from the Worker table in upper case.  
=>	select upper(first_name) from worker;

3.Write an SQL query to fetch unique values of DEPARTMENT from the Worker table.
=>	select distinct(department) from worker;

4.Write an SQL query to print the first three characters of FIRST_NAME from the Worker table. 
=>	select substr(first_name,1,3) as WORKER_NAME from worker;

5.Write an SQL query to find the position of the alphabet (‘a’) in the first name column ‘Amitabh’ from the Worker table. 
=>	select instr(first_name,'a') as position_is from worker
	where first_name = 'Amitabh';

6.Write an SQL query to print the FIRST_NAME from the Worker table after removing white spaces from the right side. 
=>	select rtrim(first_name) as WORKER_NAME from worker;

7.Write an SQL query to print the DEPARTMENT from the Worker table after removing white spaces from the left side. 
=>	select ltrim(Department) as Department from worker;

8.Write an SQL query that fetches the unique values of DEPARTMENT from the Worker table and prints its length.  
=>	select distinct Department as Department, length(Department) as length_of_dep from worker;

9.Write an SQL query to print the FIRST_NAME from the Worker table after replacing ‘a’ with ‘A’.
=>	select replace(first_name,'a','A') as replaced_alpha from worker;

10.Write an SQL query to print the FIRST_NAME and LAST_NAME from the Worker table into a single column COMPLETE_NAME. 
A space char should separate them.  
=>	select concat(First_name,' ',last_name) as complete_name from worker;

11.Write an SQL query to print all Worker details from the Worker table order by FIRST_NAME Ascending.
=>	select * from worker
	order by first_name;
	
12.Write an SQL query to print all Worker details from the Worker table order by FIRST_NAME Ascending and DEPARTMENT 
Descending.
=>	select * from worker
	order by first_name asc, Department desc;
	
13.Write an SQL query to print details for Workers with the first names “Vipul” and “Satish” from the Worker table.
=>	select * from worker
	where first_name in ('Vipul','Satish');
	
14.Write an SQL query to print details of workers excluding first names, “Vipul” and “Satish” from the Worker table. 
=>	select * from worker
	where first_name not in ('Vipul','Satish');
	
15.Write an SQL query to print details of Workers with DEPARTMENT name as “Admin”.
=>	select * from worker
	where Department='admin';
	
16.Write an SQL query to print details of the Workers whose FIRST_NAME contains ‘a’.
=>	select * from worker
	where First_name like '%a%';
	
17.Write an SQL query to print details of the Workers whose FIRST_NAME ends with ‘a’.
=>	select * from worker
	where First_name like '%a';
	
18.Write an SQL query to print details of the Workers whose FIRST_NAME ends with ‘h’ and contains six alphabets.
=>	select * from worker
	where First_name like '%h' and First_name like '__';
	
19.Write an SQL query to print details of the Workers whose SALARY lies between 100000 and 500000.
=>	select * from worker
	where Salary between 100000 and 500000;

20.Write an SQL query to print details of the Workers who joined in Feb’2014.
=>	select * from worker
	where year(joining_date)='2014' and month(Joining_date)='2';

21.Write an SQL query to fetch the count of employees working in the department ‘Admin’.
=>	select count(*) as no_of_employess,Department from worker
	where department = 'Admin';

22.Write an SQL query to fetch worker names with salaries >= 50000 and <= 100000.
=>	select * from worker
	where salary>=50000 and salary<=100000;	
	
23.Write an SQL query to fetch the no. of workers for each department in descending order. 
=>	select count(*) as no_of_workers, department from worker
	group by Department;
	
24.Write an SQL query to print details of the Workers who are also Managers. 
=>	select * from worker
	join title on worker.Worker_id = title.Worker_ref_id
	where Worker_title = 'Manager';
	
25.Write an SQL query to fetch duplicate records having matching data in some fields of a table. 
=>	select Joining_date, count(Joining_date) from worker
	group by joining_date
	having count(Joining_date)>1;
	
26.Write an SQL query to show only odd rows from a table. 
=>	select * from worker
	where Worker_id % 2 !=0;
	
27.Write an SQL query to show only even rows from a table.
=>	select * from worker
	where Worker_id % 2 =0;
	
28. Write an SQL query to clone a new table from another table. 
=>	Create table worker_dup select * from worker;
	select * from worker_dup;
	
29.Write an SQL query to fetch intersecting records of two tables.
=>	select * from worker
	join bonus
	on worker.Worker_id = bonus.Worker_ref_id;
	
30.Write an SQL query to show records from one table that another table does not have.
=>	select * from worker
	left join bonus
	on worker.Worker_id = bonus.Worker_ref_id
	where bonus.Worker_ref_id is null;
	
31.Write an SQL query to show the current date and time. 
=>	select current_timestamp();

32.Write an SQL query to show the top n (say 10) records of a table.
=>	select * from worker
	limit 10;
	
33.Write an SQL query to determine the nth (say n=5) highest salary from a table.  
=>	select distinct(salary) from worker
	order by salary desc
	limit 4,1;
	
34.Write an SQL query to determine the 5th highest salary without using the TOP or limit method.
=>	SELECT * FROM (  
	SELECT ROW_NUMBER() OVER (ORDER BY SALARY DESC) AS rownumber, Salary  
	FROM worker )  
	AS foo
	WHERE rownumber = 5;

35.Write an SQL query to fetch the list of employees with the same salary.
=>	select count(*) as employee_name, salary from worker
	group by Salary;
	
36.Write an SQL query to show the second-highest salary from a table.  
=>	select salary from worker
	group by salary
	order by salary desc
	limit 1,1;
	
37.Write an SQL query to show one row twice in the results from a table.  
=>	select * from worker where worker_id = 1
	union all
	select * from worker where worker_id = 1;
	

38.Write an SQL query to fetch intersecting records of two tables. 
=>	select * from worker
	join title on 
	worker.Worker_id = title.Worker_ref_id;
	
39.Write an SQL query to fetch the first 50% of records from a table.  
=>	select * from worker
	where worker_id <= (select count(worker_id)/2 from worker);
	
40.Write an SQL query to fetch the departments that have less than five people in them. 
=>	select count(Worker_id) as no_of_employee, Department  from worker
	group by Department
	having no_of_employee <3;
	
41.Write an SQL query to show all departments along with the number of people in there. 
=>	select count(Worker_id) as no_of_employee, Department  from worker
	group by Department;

42.Write an SQL query to show the last record from a table.
=>	SELECT * FROM worker w1
	WHERE not exists(
		SELECT * FROM worker w2
		WHERE w2.Worker_id > w1.Worker_id
	);
	
43.Write an SQL query to fetch the first row of a table. 
=>	SELECT * FROM worker w1
	WHERE not exists(
		SELECT * FROM worker w2
		WHERE w2.Worker_id < w1.Worker_id
	);

44.Write an SQL query to fetch the last five records from a table. 
=>	select * from worker
	order by Worker_id desc
	limit 5;
	
45.Write an SQL query to print the name of employees having the highest salary in each department.  
=>	select count(*) as no_of_employess, department, max(salary) from worker
	group by department;
	
	select department, first_name
	from worker
	where salary in (select max(salary)
					from worker
					group by department);

46.Write an SQL query to fetch three max salaries from a table. 
=>	select * from worker
	order by salary desc
	limit 3;
	
47.Write an SQL query to fetch three min salaries from a table. 
=>	select * from worker
	order by salary asc
	limit 3;
	
48.Write an SQL query to fetch nth max salaries from a table.
=>	select * from worker
	order by salary desc
	limit 1;
	
49.Write an SQL query to fetch departments along with the total salaries paid for each of them. 
=>	select department, sum(salary) as salaries from worker
	group by department;
	
50.Write an SQL query to fetch the names of workers who earn the highest salary.
=>	select concat(First_name,' ',last_name) as full_name from worker
	where salary in (select max(Salary) from worker);
